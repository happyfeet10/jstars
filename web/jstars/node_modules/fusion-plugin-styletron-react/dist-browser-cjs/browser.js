"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _fusionCore = require("fusion-core");

var _styletronReact = require("styletron-react");

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _constants = require("./constants.js");

var _legacyProvider = _interopRequireDefault(require("./legacy-provider.js"));

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */
const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Client);
let debugEngine;
let engine;
const plugin = true && (0, _fusionCore.createPlugin)({
  deps: {
    prefix: _constants.AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (ctx.element) {
      if (!engine) {
        const config = {
          hydrate: document.getElementsByClassName('_styletron_hydrate_')
        };

        if (prefix !== void 0) {
          config.prefix = prefix;
        }

        engine = new StyletronCompat(config);
      }

      if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
        const worker = new Worker(_constants.workerRoute);
        worker.postMessage({
          id: 'init_wasm',
          url: _constants.wasmRoute
        });
        worker.postMessage({
          id: 'set_render_interval',
          interval: 180
        });

        if (module.hot) {
          module.hot.addStatusHandler(status => {
            if (status === 'dispose') {
              worker.postMessage({
                id: 'invalidate'
              });
            }
          });
        }

        debugEngine = new _styletronReact.DebugEngine(worker);
      }

      ctx.element = _react.default.createElement(_styletronReact.Provider, {
        value: engine,
        debug: debugEngine,
        debugAfterHydration: Boolean(debugEngine)
      }, _react.default.createElement(_legacyProvider.default, {
        value: engine
      }, ctx.element));
    }

    return next();
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsiU3R5bGV0cm9uQ29tcGF0IiwiU3R5bGV0cm9uIiwiZGVidWdFbmdpbmUiLCJlbmdpbmUiLCJwbHVnaW4iLCJkZXBzIiwicHJlZml4IiwiQXRvbWljUHJlZml4VG9rZW4iLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZWxlbWVudCIsImNvbmZpZyIsImh5ZHJhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJXb3JrZXIiLCJ3b3JrZXIiLCJ3b3JrZXJSb3V0ZSIsInBvc3RNZXNzYWdlIiwiaWQiLCJ1cmwiLCJ3YXNtUm91dGUiLCJpbnRlcnZhbCIsIm1vZHVsZSIsImhvdCIsImFkZFN0YXR1c0hhbmRsZXIiLCJzdGF0dXMiLCJEZWJ1Z0VuZ2luZSIsIkJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQXBCQTs7Ozs7Ozs7QUFRQTs7QUFDQTtBQWFBLE1BQU1BLGVBQWUsR0FBRyxnRUFBNkJDLDZCQUE3QixDQUF4QjtBQUVBLElBQUlDLFdBQUo7QUFDQSxJQUFJQyxNQUFKO0FBRUEsTUFBTUMsTUFBTSxHQUNWLFFBQ0EsOEJBQWE7QUFDWEMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRUMsNkJBQWtCQztBQUR0QixHQURLO0FBSVhDLEVBQUFBLFVBQVUsRUFBRSxDQUFDO0FBQUNILElBQUFBO0FBQUQsR0FBRCxLQUFjLENBQUNJLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3ZDLFFBQUlELEdBQUcsQ0FBQ0UsT0FBUixFQUFpQjtBQUNmLFVBQUksQ0FBQ1QsTUFBTCxFQUFhO0FBQ1gsY0FBTVUsTUFHTCxHQUFHO0FBQ0ZDLFVBQUFBLE9BQU8sRUFBRUMsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxxQkFBaEM7QUFEUCxTQUhKOztBQU1BLFlBQUlWLE1BQU0sS0FBSyxLQUFLLENBQXBCLEVBQXVCO0FBQ3JCTyxVQUFBQSxNQUFNLENBQUNQLE1BQVAsR0FBZ0JBLE1BQWhCO0FBQ0Q7O0FBQ0RILFFBQUFBLE1BQU0sR0FBRyxJQUFJSCxlQUFKLENBQW9CYSxNQUFwQixDQUFUO0FBQ0Q7O0FBQ0QsVUFBSSx5Q0FBVyxDQUFDWCxXQUFaLElBQTJCLE9BQU9lLE1BQVAsS0FBa0IsV0FBakQsRUFBOEQ7QUFDNUQsY0FBTUMsTUFBTSxHQUFHLElBQUlELE1BQUosQ0FBV0Usc0JBQVgsQ0FBZjtBQUNBRCxRQUFBQSxNQUFNLENBQUNFLFdBQVAsQ0FBbUI7QUFDakJDLFVBQUFBLEVBQUUsRUFBRSxXQURhO0FBRWpCQyxVQUFBQSxHQUFHLEVBQUVDO0FBRlksU0FBbkI7QUFJQUwsUUFBQUEsTUFBTSxDQUFDRSxXQUFQLENBQW1CO0FBQ2pCQyxVQUFBQSxFQUFFLEVBQUUscUJBRGE7QUFFakJHLFVBQUFBLFFBQVEsRUFBRTtBQUZPLFNBQW5COztBQUlBLFlBQUtDLE1BQUQsQ0FBY0MsR0FBbEIsRUFBdUI7QUFDcEJELFVBQUFBLE1BQUQsQ0FBY0MsR0FBZCxDQUFrQkMsZ0JBQWxCLENBQW1DQyxNQUFNLElBQUk7QUFDM0MsZ0JBQUlBLE1BQU0sS0FBSyxTQUFmLEVBQTBCO0FBQ3hCVixjQUFBQSxNQUFNLENBQUNFLFdBQVAsQ0FBbUI7QUFBQ0MsZ0JBQUFBLEVBQUUsRUFBRTtBQUFMLGVBQW5CO0FBQ0Q7QUFDRixXQUpEO0FBS0Q7O0FBQ0RuQixRQUFBQSxXQUFXLEdBQUcsSUFBSTJCLDJCQUFKLENBQWdCWCxNQUFoQixDQUFkO0FBQ0Q7O0FBQ0RSLE1BQUFBLEdBQUcsQ0FBQ0UsT0FBSixHQUNFLDZCQUFDLHdCQUFEO0FBQ0UsUUFBQSxLQUFLLEVBQUVULE1BRFQ7QUFFRSxRQUFBLEtBQUssRUFBRUQsV0FGVDtBQUdFLFFBQUEsbUJBQW1CLEVBQUU0QixPQUFPLENBQUM1QixXQUFEO0FBSDlCLFNBS0UsNkJBQUMsdUJBQUQ7QUFBZ0IsUUFBQSxLQUFLLEVBQUVDO0FBQXZCLFNBQWdDTyxHQUFHLENBQUNFLE9BQXBDLENBTEYsQ0FERjtBQVNEOztBQUVELFdBQU9ELElBQUksRUFBWDtBQUNEO0FBakRVLENBQWIsQ0FGRjtlQXNEaUJQLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbi8qIGdsb2JhbCBtb2R1bGUgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y3JlYXRlUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5pbXBvcnQgdHlwZSB7RnVzaW9uUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmltcG9ydCB7UHJvdmlkZXIgYXMgU3R5bGV0cm9uUHJvdmlkZXIsIERlYnVnRW5naW5lfSBmcm9tICdzdHlsZXRyb24tcmVhY3QnO1xuaW1wb3J0IHtDbGllbnQgYXMgU3R5bGV0cm9ufSBmcm9tICdzdHlsZXRyb24tZW5naW5lLWF0b21pYyc7XG5pbXBvcnQge3dvcmtlclJvdXRlLCB3YXNtUm91dGUsIEF0b21pY1ByZWZpeFRva2VufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCBMZWdhY3lQcm92aWRlciBmcm9tICcuL2xlZ2FjeS1wcm92aWRlci5qcyc7XG5pbXBvcnQge2luamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW59IGZyb20gJy4vaW5qZWN0LWRlY2xhcmF0aW9uLWNvbXBhdC1taXhpbi5qcyc7XG5cbmNvbnN0IFN0eWxldHJvbkNvbXBhdCA9IGluamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW4oU3R5bGV0cm9uKTtcblxubGV0IGRlYnVnRW5naW5lO1xubGV0IGVuZ2luZTtcblxuY29uc3QgcGx1Z2luID1cbiAgX19CUk9XU0VSX18gJiZcbiAgY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBwcmVmaXg6IEF0b21pY1ByZWZpeFRva2VuLm9wdGlvbmFsLFxuICAgIH0sXG4gICAgbWlkZGxld2FyZTogKHtwcmVmaXh9KSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFlbmdpbmUpIHtcbiAgICAgICAgICBjb25zdCBjb25maWc6IHtcbiAgICAgICAgICAgIGh5ZHJhdGU6IEhUTUxDb2xsZWN0aW9uPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgIHByZWZpeD86IHN0cmluZyxcbiAgICAgICAgICB9ID0ge1xuICAgICAgICAgICAgaHlkcmF0ZTogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnX3N0eWxldHJvbl9oeWRyYXRlXycpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHByZWZpeCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25maWcucHJlZml4ID0gcHJlZml4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbmdpbmUgPSBuZXcgU3R5bGV0cm9uQ29tcGF0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fREVWX18gJiYgIWRlYnVnRW5naW5lICYmIHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJSb3V0ZSk7XG4gICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiAnaW5pdF93YXNtJyxcbiAgICAgICAgICAgIHVybDogd2FzbVJvdXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogJ3NldF9yZW5kZXJfaW50ZXJ2YWwnLFxuICAgICAgICAgICAgaW50ZXJ2YWw6IDE4MCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoKG1vZHVsZTogYW55KS5ob3QpIHtcbiAgICAgICAgICAgIChtb2R1bGU6IGFueSkuaG90LmFkZFN0YXR1c0hhbmRsZXIoc3RhdHVzID0+IHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2Rpc3Bvc2UnKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtpZDogJ2ludmFsaWRhdGUnfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1Z0VuZ2luZSA9IG5ldyBEZWJ1Z0VuZ2luZSh3b3JrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5lbGVtZW50ID0gKFxuICAgICAgICAgIDxTdHlsZXRyb25Qcm92aWRlclxuICAgICAgICAgICAgdmFsdWU9e2VuZ2luZX1cbiAgICAgICAgICAgIGRlYnVnPXtkZWJ1Z0VuZ2luZX1cbiAgICAgICAgICAgIGRlYnVnQWZ0ZXJIeWRyYXRpb249e0Jvb2xlYW4oZGVidWdFbmdpbmUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMZWdhY3lQcm92aWRlciB2YWx1ZT17ZW5naW5lfT57Y3R4LmVsZW1lbnR9PC9MZWdhY3lQcm92aWRlcj5cbiAgICAgICAgICA8L1N0eWxldHJvblByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKHBsdWdpbjogYW55KTogRnVzaW9uUGx1Z2luPCosICo+KTtcbiJdfQ==