"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _react = _interopRequireDefault(require("react"));

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && false) {
  const base = _path.default.dirname(require.resolve('css-to-js-sourcemap-worker'));

  workerPath = _path.default.resolve(base, 'worker.js');
  wasmPath = _path.default.resolve(base, 'mappings.wasm');
}

const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Server);
const plugin = false && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === workerRoute) {
        ctx.body = fs.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === wasmRoute) {
        ctx.body = fs.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = _react.default.createElement(StyletronProvider, {
        value: engine
      }, _react.default.createElement(LegacyProvider, {
        value: engine
      }, ctx.element));
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push(dangerouslySetHTML(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJ3b3JrZXJQYXRoIiwid2FzbVBhdGgiLCJiYXNlIiwicGF0aCIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsIlN0eWxldHJvbiIsInBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7O0FBR0E7O0FBS0E7O0FBR0E7Ozs7QUFyQkE7Ozs7Ozs7O0FBUUE7QUFnQkEsSUFBSUEsVUFBSjtBQUNBLElBQUlDLFFBQUo7O0FBRUEsSUFBSSw4Q0FBSixFQUF5QjtBQUN2QixRQUFNQyxJQUFJLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCLDRCQUFoQixDQUFiLENBQWI7O0FBQ0FOLEVBQUFBLFVBQVUsR0FBR0csY0FBS0csT0FBTCxDQUFhSixJQUFiLEVBQW1CLFdBQW5CLENBQWI7QUFDQUQsRUFBQUEsUUFBUSxHQUFHRSxjQUFLRyxPQUFMLENBQWFKLElBQWIsRUFBbUIsZUFBbkIsQ0FBWDtBQUNEOztBQUVELE1BQU1LLGVBQWUsR0FBRyxnRUFBNkJDLDZCQUE3QixDQUF4QjtBQUVBLE1BQU1DLE1BQU0sR0FDVixTQUNBQyxZQUFZLENBQUM7QUFDWEMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRUMsaUJBQWlCLENBQUNDO0FBRHRCLEdBREs7QUFJWEMsRUFBQUEsVUFBVSxFQUFFLENBQUM7QUFBQ0gsSUFBQUE7QUFBRCxHQUFELEtBQWMsQ0FBQ0ksR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDdkMsK0NBQWE7QUFDWCxVQUFJRCxHQUFHLENBQUNFLEdBQUosS0FBWUMsV0FBaEIsRUFBNkI7QUFDM0JILFFBQUFBLEdBQUcsQ0FBQ0ksSUFBSixHQUFXQyxFQUFFLENBQUNDLGdCQUFILENBQW9CdEIsVUFBcEIsQ0FBWDtBQUNBLGVBQU9pQixJQUFJLEVBQVg7QUFDRDs7QUFDRCxVQUFJRCxHQUFHLENBQUNFLEdBQUosS0FBWUssU0FBaEIsRUFBMkI7QUFDekJQLFFBQUFBLEdBQUcsQ0FBQ0ksSUFBSixHQUFXQyxFQUFFLENBQUNDLGdCQUFILENBQW9CckIsUUFBcEIsQ0FBWDtBQUNBLGVBQU9nQixJQUFJLEVBQVg7QUFDRDtBQUNGOztBQUVELFFBQUlELEdBQUcsQ0FBQ1EsT0FBUixFQUFpQjtBQUNmLFlBQU1DLE1BQU0sR0FBR2IsTUFBTSxLQUFLLEtBQUssQ0FBaEIsR0FBb0IsS0FBSyxDQUF6QixHQUE2QjtBQUFDQSxRQUFBQTtBQUFELE9BQTVDO0FBQ0EsWUFBTWMsTUFBTSxHQUFHLElBQUluQixlQUFKLENBQW9Ca0IsTUFBcEIsQ0FBZjtBQUVBVCxNQUFBQSxHQUFHLENBQUNRLE9BQUosR0FDRSw2QkFBQyxpQkFBRDtBQUFtQixRQUFBLEtBQUssRUFBRUU7QUFBMUIsU0FDRSw2QkFBQyxjQUFEO0FBQWdCLFFBQUEsS0FBSyxFQUFFQTtBQUF2QixTQUFnQ1YsR0FBRyxDQUFDUSxPQUFwQyxDQURGLENBREY7QUFNQSxhQUFPUCxJQUFJLEdBQUdVLElBQVAsQ0FBWSxNQUFNO0FBQ3ZCLGNBQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBUCxFQUF0QjtBQUNBYixRQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYUMsSUFBYixDQUFrQkMsSUFBbEIsQ0FBdUJDLGtCQUFrQixDQUFDTCxhQUFELENBQXpDO0FBQ0QsT0FITSxDQUFQO0FBSUQsS0FkRCxNQWNPO0FBQ0wsYUFBT1gsSUFBSSxFQUFYO0FBQ0Q7QUFDRjtBQWpDVSxDQUFELENBRmQ7ZUFzQ2lCUixNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLyogZXNsaW50LWVudiBub2RlICovXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y3JlYXRlUGx1Z2luLCBkYW5nZXJvdXNseVNldEhUTUx9IGZyb20gJ2Z1c2lvbi1jb3JlJztcbmltcG9ydCB0eXBlIHtGdXNpb25QbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHtQcm92aWRlciBhcyBTdHlsZXRyb25Qcm92aWRlcn0gZnJvbSAnc3R5bGV0cm9uLXJlYWN0JztcbmltcG9ydCB7U2VydmVyIGFzIFN0eWxldHJvbn0gZnJvbSAnc3R5bGV0cm9uLWVuZ2luZS1hdG9taWMnO1xuXG5pbXBvcnQgTGVnYWN5UHJvdmlkZXIgZnJvbSAnLi9sZWdhY3ktcHJvdmlkZXIuanMnO1xuaW1wb3J0IHtpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGlufSBmcm9tICcuL2luamVjdC1kZWNsYXJhdGlvbi1jb21wYXQtbWl4aW4uanMnO1xuaW1wb3J0IHt3b3JrZXJSb3V0ZSwgd2FzbVJvdXRlLCBBdG9taWNQcmVmaXhUb2tlbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5sZXQgd29ya2VyUGF0aDtcbmxldCB3YXNtUGF0aDtcblxuaWYgKF9fREVWX18gJiYgX19OT0RFX18pIHtcbiAgY29uc3QgYmFzZSA9IHBhdGguZGlybmFtZShyZXF1aXJlLnJlc29sdmUoJ2Nzcy10by1qcy1zb3VyY2VtYXAtd29ya2VyJykpO1xuICB3b3JrZXJQYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICd3b3JrZXIuanMnKTtcbiAgd2FzbVBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ21hcHBpbmdzLndhc20nKTtcbn1cblxuY29uc3QgU3R5bGV0cm9uQ29tcGF0ID0gaW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbihTdHlsZXRyb24pO1xuXG5jb25zdCBwbHVnaW4gPVxuICBfX05PREVfXyAmJlxuICBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHByZWZpeDogQXRvbWljUHJlZml4VG9rZW4ub3B0aW9uYWwsXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoe3ByZWZpeH0pID0+IChjdHgsIG5leHQpID0+IHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3b3JrZXJSb3V0ZSkge1xuICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3b3JrZXJQYXRoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3YXNtUm91dGUpIHtcbiAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od2FzbVBhdGgpO1xuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN0eC5lbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHByZWZpeCA9PT0gdm9pZCAwID8gdm9pZCAwIDoge3ByZWZpeH07XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBTdHlsZXRyb25Db21wYXQoY29uZmlnKTtcblxuICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICA8U3R5bGV0cm9uUHJvdmlkZXIgdmFsdWU9e2VuZ2luZX0+XG4gICAgICAgICAgICA8TGVnYWN5UHJvdmlkZXIgdmFsdWU9e2VuZ2luZX0+e2N0eC5lbGVtZW50fTwvTGVnYWN5UHJvdmlkZXI+XG4gICAgICAgICAgPC9TdHlsZXRyb25Qcm92aWRlcj5cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gbmV4dCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlc0ZvckhlYWQgPSBlbmdpbmUuZ2V0U3R5bGVzaGVldHNIdG1sKCk7XG4gICAgICAgICAgY3R4LnRlbXBsYXRlLmhlYWQucHVzaChkYW5nZXJvdXNseVNldEhUTUwoc3R5bGVzRm9ySGVhZCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBkZWZhdWx0ICgocGx1Z2luOiBhbnkpOiBGdXNpb25QbHVnaW48KiwgKj4pO1xuIl19