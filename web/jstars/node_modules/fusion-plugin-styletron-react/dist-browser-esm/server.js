/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import path from 'path';
import React from 'react';
import { Server as Styletron } from 'styletron-engine-atomic';
import { injectDeclarationCompatMixin } from './inject-declaration-compat-mixin.js';
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && false) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}

const StyletronCompat = injectDeclarationCompatMixin(Styletron);
const plugin = false && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === workerRoute) {
        ctx.body = fs.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === wasmRoute) {
        ctx.body = fs.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = React.createElement(StyletronProvider, {
        value: engine
      }, React.createElement(LegacyProvider, {
        value: engine
      }, ctx.element));
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push(dangerouslySetHTML(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
export default plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwiUmVhY3QiLCJTZXJ2ZXIiLCJTdHlsZXRyb24iLCJpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGluIiwid29ya2VyUGF0aCIsIndhc21QYXRoIiwiYmFzZSIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsInBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTtBQUVBLE9BQU9BLElBQVAsTUFBaUIsTUFBakI7QUFHQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBS0EsU0FBUUMsTUFBTSxJQUFJQyxTQUFsQixRQUFrQyx5QkFBbEM7QUFHQSxTQUFRQyw0QkFBUixRQUEyQyxzQ0FBM0M7QUFHQSxJQUFJQyxVQUFKO0FBQ0EsSUFBSUMsUUFBSjs7QUFFQSxJQUFJLDhDQUFKLEVBQXlCO0FBQ3ZCLFFBQU1DLElBQUksR0FBR1AsSUFBSSxDQUFDUSxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQiw0QkFBaEIsQ0FBYixDQUFiO0FBQ0FMLEVBQUFBLFVBQVUsR0FBR0wsSUFBSSxDQUFDVSxPQUFMLENBQWFILElBQWIsRUFBbUIsV0FBbkIsQ0FBYjtBQUNBRCxFQUFBQSxRQUFRLEdBQUdOLElBQUksQ0FBQ1UsT0FBTCxDQUFhSCxJQUFiLEVBQW1CLGVBQW5CLENBQVg7QUFDRDs7QUFFRCxNQUFNSSxlQUFlLEdBQUdQLDRCQUE0QixDQUFDRCxTQUFELENBQXBEO0FBRUEsTUFBTVMsTUFBTSxHQUNWLFNBQ0FDLFlBQVksQ0FBQztBQUNYQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQ0M7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDSCxJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDSSxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QywrQ0FBYTtBQUNYLFVBQUlELEdBQUcsQ0FBQ0UsR0FBSixLQUFZQyxXQUFoQixFQUE2QjtBQUMzQkgsUUFBQUEsR0FBRyxDQUFDSSxJQUFKLEdBQVdDLEVBQUUsQ0FBQ0MsZ0JBQUgsQ0FBb0JwQixVQUFwQixDQUFYO0FBQ0EsZUFBT2UsSUFBSSxFQUFYO0FBQ0Q7O0FBQ0QsVUFBSUQsR0FBRyxDQUFDRSxHQUFKLEtBQVlLLFNBQWhCLEVBQTJCO0FBQ3pCUCxRQUFBQSxHQUFHLENBQUNJLElBQUosR0FBV0MsRUFBRSxDQUFDQyxnQkFBSCxDQUFvQm5CLFFBQXBCLENBQVg7QUFDQSxlQUFPYyxJQUFJLEVBQVg7QUFDRDtBQUNGOztBQUVELFFBQUlELEdBQUcsQ0FBQ1EsT0FBUixFQUFpQjtBQUNmLFlBQU1DLE1BQU0sR0FBR2IsTUFBTSxLQUFLLEtBQUssQ0FBaEIsR0FBb0IsS0FBSyxDQUF6QixHQUE2QjtBQUFDQSxRQUFBQTtBQUFELE9BQTVDO0FBQ0EsWUFBTWMsTUFBTSxHQUFHLElBQUlsQixlQUFKLENBQW9CaUIsTUFBcEIsQ0FBZjtBQUVBVCxNQUFBQSxHQUFHLENBQUNRLE9BQUosR0FDRSxvQkFBQyxpQkFBRDtBQUFtQixRQUFBLEtBQUssRUFBRUU7QUFBMUIsU0FDRSxvQkFBQyxjQUFEO0FBQWdCLFFBQUEsS0FBSyxFQUFFQTtBQUF2QixTQUFnQ1YsR0FBRyxDQUFDUSxPQUFwQyxDQURGLENBREY7QUFNQSxhQUFPUCxJQUFJLEdBQUdVLElBQVAsQ0FBWSxNQUFNO0FBQ3ZCLGNBQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBUCxFQUF0QjtBQUNBYixRQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYUMsSUFBYixDQUFrQkMsSUFBbEIsQ0FBdUJDLGtCQUFrQixDQUFDTCxhQUFELENBQXpDO0FBQ0QsT0FITSxDQUFQO0FBSUQsS0FkRCxNQWNPO0FBQ0wsYUFBT1gsSUFBSSxFQUFYO0FBQ0Q7QUFDRjtBQWpDVSxDQUFELENBRmQ7QUFzQ0EsZUFBaUJSLE1BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLyogZXNsaW50LWVudiBub2RlICovXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y3JlYXRlUGx1Z2luLCBkYW5nZXJvdXNseVNldEhUTUx9IGZyb20gJ2Z1c2lvbi1jb3JlJztcbmltcG9ydCB0eXBlIHtGdXNpb25QbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHtQcm92aWRlciBhcyBTdHlsZXRyb25Qcm92aWRlcn0gZnJvbSAnc3R5bGV0cm9uLXJlYWN0JztcbmltcG9ydCB7U2VydmVyIGFzIFN0eWxldHJvbn0gZnJvbSAnc3R5bGV0cm9uLWVuZ2luZS1hdG9taWMnO1xuXG5pbXBvcnQgTGVnYWN5UHJvdmlkZXIgZnJvbSAnLi9sZWdhY3ktcHJvdmlkZXIuanMnO1xuaW1wb3J0IHtpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGlufSBmcm9tICcuL2luamVjdC1kZWNsYXJhdGlvbi1jb21wYXQtbWl4aW4uanMnO1xuaW1wb3J0IHt3b3JrZXJSb3V0ZSwgd2FzbVJvdXRlLCBBdG9taWNQcmVmaXhUb2tlbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5sZXQgd29ya2VyUGF0aDtcbmxldCB3YXNtUGF0aDtcblxuaWYgKF9fREVWX18gJiYgX19OT0RFX18pIHtcbiAgY29uc3QgYmFzZSA9IHBhdGguZGlybmFtZShyZXF1aXJlLnJlc29sdmUoJ2Nzcy10by1qcy1zb3VyY2VtYXAtd29ya2VyJykpO1xuICB3b3JrZXJQYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICd3b3JrZXIuanMnKTtcbiAgd2FzbVBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ21hcHBpbmdzLndhc20nKTtcbn1cblxuY29uc3QgU3R5bGV0cm9uQ29tcGF0ID0gaW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbihTdHlsZXRyb24pO1xuXG5jb25zdCBwbHVnaW4gPVxuICBfX05PREVfXyAmJlxuICBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHByZWZpeDogQXRvbWljUHJlZml4VG9rZW4ub3B0aW9uYWwsXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoe3ByZWZpeH0pID0+IChjdHgsIG5leHQpID0+IHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3b3JrZXJSb3V0ZSkge1xuICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3b3JrZXJQYXRoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3YXNtUm91dGUpIHtcbiAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od2FzbVBhdGgpO1xuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN0eC5lbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHByZWZpeCA9PT0gdm9pZCAwID8gdm9pZCAwIDoge3ByZWZpeH07XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBTdHlsZXRyb25Db21wYXQoY29uZmlnKTtcblxuICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICA8U3R5bGV0cm9uUHJvdmlkZXIgdmFsdWU9e2VuZ2luZX0+XG4gICAgICAgICAgICA8TGVnYWN5UHJvdmlkZXIgdmFsdWU9e2VuZ2luZX0+e2N0eC5lbGVtZW50fTwvTGVnYWN5UHJvdmlkZXI+XG4gICAgICAgICAgPC9TdHlsZXRyb25Qcm92aWRlcj5cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gbmV4dCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlc0ZvckhlYWQgPSBlbmdpbmUuZ2V0U3R5bGVzaGVldHNIdG1sKCk7XG4gICAgICAgICAgY3R4LnRlbXBsYXRlLmhlYWQucHVzaChkYW5nZXJvdXNseVNldEhUTUwoc3R5bGVzRm9ySGVhZCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBkZWZhdWx0ICgocGx1Z2luOiBhbnkpOiBGdXNpb25QbHVnaW48KiwgKj4pO1xuIl19