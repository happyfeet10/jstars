/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import path from 'path';
import fs from 'fs';
import React from 'react';
import { createPlugin, dangerouslySetHTML } from 'fusion-core';
import { Provider as StyletronProvider } from 'styletron-react';
import { Server as Styletron } from 'styletron-engine-atomic';
import LegacyProvider from './legacy-provider.js';
import { injectDeclarationCompatMixin } from './inject-declaration-compat-mixin.js';
import { workerRoute, wasmRoute, AtomicPrefixToken } from './constants.js';
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && true) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}

const StyletronCompat = injectDeclarationCompatMixin(Styletron);
const plugin = true && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === workerRoute) {
        ctx.body = fs.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === wasmRoute) {
        ctx.body = fs.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = React.createElement(StyletronProvider, {
        value: engine
      }, React.createElement(LegacyProvider, {
        value: engine
      }, ctx.element));
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push(dangerouslySetHTML(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
export default plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwiZnMiLCJSZWFjdCIsImNyZWF0ZVBsdWdpbiIsImRhbmdlcm91c2x5U2V0SFRNTCIsIlByb3ZpZGVyIiwiU3R5bGV0cm9uUHJvdmlkZXIiLCJTZXJ2ZXIiLCJTdHlsZXRyb24iLCJMZWdhY3lQcm92aWRlciIsImluamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW4iLCJ3b3JrZXJSb3V0ZSIsIndhc21Sb3V0ZSIsIkF0b21pY1ByZWZpeFRva2VuIiwid29ya2VyUGF0aCIsIndhc21QYXRoIiwiYmFzZSIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsInBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwidXJsIiwiYm9keSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTtBQUVBLE9BQU9BLElBQVAsTUFBaUIsTUFBakI7QUFDQSxPQUFPQyxFQUFQLE1BQWUsSUFBZjtBQUVBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFRQyxZQUFSLEVBQXNCQyxrQkFBdEIsUUFBK0MsYUFBL0M7QUFHQSxTQUFRQyxRQUFRLElBQUlDLGlCQUFwQixRQUE0QyxpQkFBNUM7QUFDQSxTQUFRQyxNQUFNLElBQUlDLFNBQWxCLFFBQWtDLHlCQUFsQztBQUVBLE9BQU9DLGNBQVAsTUFBMkIsc0JBQTNCO0FBQ0EsU0FBUUMsNEJBQVIsUUFBMkMsc0NBQTNDO0FBQ0EsU0FBUUMsV0FBUixFQUFxQkMsU0FBckIsRUFBZ0NDLGlCQUFoQyxRQUF3RCxnQkFBeEQ7QUFFQSxJQUFJQyxVQUFKO0FBQ0EsSUFBSUMsUUFBSjs7QUFFQSxJQUFJLDZDQUFKLEVBQXlCO0FBQ3ZCLFFBQU1DLElBQUksR0FBR2hCLElBQUksQ0FBQ2lCLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCLDRCQUFoQixDQUFiLENBQWI7QUFDQUwsRUFBQUEsVUFBVSxHQUFHZCxJQUFJLENBQUNtQixPQUFMLENBQWFILElBQWIsRUFBbUIsV0FBbkIsQ0FBYjtBQUNBRCxFQUFBQSxRQUFRLEdBQUdmLElBQUksQ0FBQ21CLE9BQUwsQ0FBYUgsSUFBYixFQUFtQixlQUFuQixDQUFYO0FBQ0Q7O0FBRUQsTUFBTUksZUFBZSxHQUFHViw0QkFBNEIsQ0FBQ0YsU0FBRCxDQUFwRDtBQUVBLE1BQU1hLE1BQU0sR0FDVixRQUNBbEIsWUFBWSxDQUFDO0FBQ1htQixFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsTUFBTSxFQUFFVixpQkFBaUIsQ0FBQ1c7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDRixJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDRyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QywrQ0FBYTtBQUNYLFVBQUlELEdBQUcsQ0FBQ0UsR0FBSixLQUFZakIsV0FBaEIsRUFBNkI7QUFDM0JlLFFBQUFBLEdBQUcsQ0FBQ0csSUFBSixHQUFXNUIsRUFBRSxDQUFDNkIsZ0JBQUgsQ0FBb0JoQixVQUFwQixDQUFYO0FBQ0EsZUFBT2EsSUFBSSxFQUFYO0FBQ0Q7O0FBQ0QsVUFBSUQsR0FBRyxDQUFDRSxHQUFKLEtBQVloQixTQUFoQixFQUEyQjtBQUN6QmMsUUFBQUEsR0FBRyxDQUFDRyxJQUFKLEdBQVc1QixFQUFFLENBQUM2QixnQkFBSCxDQUFvQmYsUUFBcEIsQ0FBWDtBQUNBLGVBQU9ZLElBQUksRUFBWDtBQUNEO0FBQ0Y7O0FBRUQsUUFBSUQsR0FBRyxDQUFDSyxPQUFSLEVBQWlCO0FBQ2YsWUFBTUMsTUFBTSxHQUFHVCxNQUFNLEtBQUssS0FBSyxDQUFoQixHQUFvQixLQUFLLENBQXpCLEdBQTZCO0FBQUNBLFFBQUFBO0FBQUQsT0FBNUM7QUFDQSxZQUFNVSxNQUFNLEdBQUcsSUFBSWIsZUFBSixDQUFvQlksTUFBcEIsQ0FBZjtBQUVBTixNQUFBQSxHQUFHLENBQUNLLE9BQUosR0FDRSxvQkFBQyxpQkFBRDtBQUFtQixRQUFBLEtBQUssRUFBRUU7QUFBMUIsU0FDRSxvQkFBQyxjQUFEO0FBQWdCLFFBQUEsS0FBSyxFQUFFQTtBQUF2QixTQUFnQ1AsR0FBRyxDQUFDSyxPQUFwQyxDQURGLENBREY7QUFNQSxhQUFPSixJQUFJLEdBQUdPLElBQVAsQ0FBWSxNQUFNO0FBQ3ZCLGNBQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBUCxFQUF0QjtBQUNBVixRQUFBQSxHQUFHLENBQUNXLFFBQUosQ0FBYUMsSUFBYixDQUFrQkMsSUFBbEIsQ0FBdUJuQyxrQkFBa0IsQ0FBQytCLGFBQUQsQ0FBekM7QUFDRCxPQUhNLENBQVA7QUFJRCxLQWRELE1BY087QUFDTCxhQUFPUixJQUFJLEVBQVg7QUFDRDtBQUNGO0FBakNVLENBQUQsQ0FGZDtBQXNDQSxlQUFpQk4sTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW4sIGRhbmdlcm91c2x5U2V0SFRNTH0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuaW1wb3J0IHR5cGUge0Z1c2lvblBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyfSBmcm9tICdzdHlsZXRyb24tcmVhY3QnO1xuaW1wb3J0IHtTZXJ2ZXIgYXMgU3R5bGV0cm9ufSBmcm9tICdzdHlsZXRyb24tZW5naW5lLWF0b21pYyc7XG5cbmltcG9ydCBMZWdhY3lQcm92aWRlciBmcm9tICcuL2xlZ2FjeS1wcm92aWRlci5qcyc7XG5pbXBvcnQge2luamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW59IGZyb20gJy4vaW5qZWN0LWRlY2xhcmF0aW9uLWNvbXBhdC1taXhpbi5qcyc7XG5pbXBvcnQge3dvcmtlclJvdXRlLCB3YXNtUm91dGUsIEF0b21pY1ByZWZpeFRva2VufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmxldCB3b3JrZXJQYXRoO1xubGV0IHdhc21QYXRoO1xuXG5pZiAoX19ERVZfXyAmJiBfX05PREVfXykge1xuICBjb25zdCBiYXNlID0gcGF0aC5kaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgnY3NzLXRvLWpzLXNvdXJjZW1hcC13b3JrZXInKSk7XG4gIHdvcmtlclBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ3dvcmtlci5qcycpO1xuICB3YXNtUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnbWFwcGluZ3Mud2FzbScpO1xufVxuXG5jb25zdCBTdHlsZXRyb25Db21wYXQgPSBpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGluKFN0eWxldHJvbik7XG5cbmNvbnN0IHBsdWdpbiA9XG4gIF9fTk9ERV9fICYmXG4gIGNyZWF0ZVBsdWdpbih7XG4gICAgZGVwczoge1xuICAgICAgcHJlZml4OiBBdG9taWNQcmVmaXhUb2tlbi5vcHRpb25hbCxcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6ICh7cHJlZml4fSkgPT4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKGN0eC51cmwgPT09IHdvcmtlclJvdXRlKSB7XG4gICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdvcmtlclBhdGgpO1xuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC51cmwgPT09IHdhc21Sb3V0ZSkge1xuICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3YXNtUGF0aCk7XG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gcHJlZml4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB7cHJlZml4fTtcbiAgICAgICAgY29uc3QgZW5naW5lID0gbmV3IFN0eWxldHJvbkNvbXBhdChjb25maWcpO1xuXG4gICAgICAgIGN0eC5lbGVtZW50ID0gKFxuICAgICAgICAgIDxTdHlsZXRyb25Qcm92aWRlciB2YWx1ZT17ZW5naW5lfT5cbiAgICAgICAgICAgIDxMZWdhY3lQcm92aWRlciB2YWx1ZT17ZW5naW5lfT57Y3R4LmVsZW1lbnR9PC9MZWdhY3lQcm92aWRlcj5cbiAgICAgICAgICA8L1N0eWxldHJvblByb3ZpZGVyPlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBuZXh0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGVzRm9ySGVhZCA9IGVuZ2luZS5nZXRTdHlsZXNoZWV0c0h0bWwoKTtcbiAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChzdHlsZXNGb3JIZWFkKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgKChwbHVnaW46IGFueSk6IEZ1c2lvblBsdWdpbjwqLCAqPik7XG4iXX0=