"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _react = _interopRequireDefault(require("react"));

var _fusionCore = require("fusion-core");

var _styletronReact = require("styletron-react");

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _legacyProvider = _interopRequireDefault(require("./legacy-provider.js"));

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

var _constants = require("./constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && true) {
  const base = _path.default.dirname(require.resolve('css-to-js-sourcemap-worker'));

  workerPath = _path.default.resolve(base, 'worker.js');
  wasmPath = _path.default.resolve(base, 'mappings.wasm');
}

const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Server);
const plugin = true && (0, _fusionCore.createPlugin)({
  deps: {
    prefix: _constants.AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === _constants.workerRoute) {
        ctx.body = _fs.default.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === _constants.wasmRoute) {
        ctx.body = _fs.default.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = _react.default.createElement(_styletronReact.Provider, {
        value: engine
      }, _react.default.createElement(_legacyProvider.default, {
        value: engine
      }, ctx.element));
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push((0, _fusionCore.dangerouslySetHTML)(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJ3b3JrZXJQYXRoIiwid2FzbVBhdGgiLCJiYXNlIiwicGF0aCIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsIlN0eWxldHJvbiIsInBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUF0QkE7Ozs7Ozs7O0FBUUE7QUFnQkEsSUFBSUEsVUFBSjtBQUNBLElBQUlDLFFBQUo7O0FBRUEsSUFBSSw2Q0FBSixFQUF5QjtBQUN2QixRQUFNQyxJQUFJLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCLDRCQUFoQixDQUFiLENBQWI7O0FBQ0FOLEVBQUFBLFVBQVUsR0FBR0csY0FBS0csT0FBTCxDQUFhSixJQUFiLEVBQW1CLFdBQW5CLENBQWI7QUFDQUQsRUFBQUEsUUFBUSxHQUFHRSxjQUFLRyxPQUFMLENBQWFKLElBQWIsRUFBbUIsZUFBbkIsQ0FBWDtBQUNEOztBQUVELE1BQU1LLGVBQWUsR0FBRyxnRUFBNkJDLDZCQUE3QixDQUF4QjtBQUVBLE1BQU1DLE1BQU0sR0FDVixRQUNBLDhCQUFhO0FBQ1hDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxNQUFNLEVBQUVDLDZCQUFrQkM7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDSCxJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDSSxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QywrQ0FBYTtBQUNYLFVBQUlELEdBQUcsQ0FBQ0UsR0FBSixLQUFZQyxzQkFBaEIsRUFBNkI7QUFDM0JILFFBQUFBLEdBQUcsQ0FBQ0ksSUFBSixHQUFXQyxZQUFHQyxnQkFBSCxDQUFvQnJCLFVBQXBCLENBQVg7QUFDQSxlQUFPZ0IsSUFBSSxFQUFYO0FBQ0Q7O0FBQ0QsVUFBSUQsR0FBRyxDQUFDRSxHQUFKLEtBQVlLLG9CQUFoQixFQUEyQjtBQUN6QlAsUUFBQUEsR0FBRyxDQUFDSSxJQUFKLEdBQVdDLFlBQUdDLGdCQUFILENBQW9CcEIsUUFBcEIsQ0FBWDtBQUNBLGVBQU9lLElBQUksRUFBWDtBQUNEO0FBQ0Y7O0FBRUQsUUFBSUQsR0FBRyxDQUFDUSxPQUFSLEVBQWlCO0FBQ2YsWUFBTUMsTUFBTSxHQUFHYixNQUFNLEtBQUssS0FBSyxDQUFoQixHQUFvQixLQUFLLENBQXpCLEdBQTZCO0FBQUNBLFFBQUFBO0FBQUQsT0FBNUM7QUFDQSxZQUFNYyxNQUFNLEdBQUcsSUFBSWxCLGVBQUosQ0FBb0JpQixNQUFwQixDQUFmO0FBRUFULE1BQUFBLEdBQUcsQ0FBQ1EsT0FBSixHQUNFLDZCQUFDLHdCQUFEO0FBQW1CLFFBQUEsS0FBSyxFQUFFRTtBQUExQixTQUNFLDZCQUFDLHVCQUFEO0FBQWdCLFFBQUEsS0FBSyxFQUFFQTtBQUF2QixTQUFnQ1YsR0FBRyxDQUFDUSxPQUFwQyxDQURGLENBREY7QUFNQSxhQUFPUCxJQUFJLEdBQUdVLElBQVAsQ0FBWSxNQUFNO0FBQ3ZCLGNBQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBUCxFQUF0QjtBQUNBYixRQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYUMsSUFBYixDQUFrQkMsSUFBbEIsQ0FBdUIsb0NBQW1CSixhQUFuQixDQUF2QjtBQUNELE9BSE0sQ0FBUDtBQUlELEtBZEQsTUFjTztBQUNMLGFBQU9YLElBQUksRUFBWDtBQUNEO0FBQ0Y7QUFqQ1UsQ0FBYixDQUZGO2VBc0NpQlAsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbiwgZGFuZ2Vyb3VzbHlTZXRIVE1MfSBmcm9tICdmdXNpb24tY29yZSc7XG5pbXBvcnQgdHlwZSB7RnVzaW9uUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmltcG9ydCB7UHJvdmlkZXIgYXMgU3R5bGV0cm9uUHJvdmlkZXJ9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5pbXBvcnQge1NlcnZlciBhcyBTdHlsZXRyb259IGZyb20gJ3N0eWxldHJvbi1lbmdpbmUtYXRvbWljJztcblxuaW1wb3J0IExlZ2FjeVByb3ZpZGVyIGZyb20gJy4vbGVnYWN5LXByb3ZpZGVyLmpzJztcbmltcG9ydCB7aW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbn0gZnJvbSAnLi9pbmplY3QtZGVjbGFyYXRpb24tY29tcGF0LW1peGluLmpzJztcbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxubGV0IHdvcmtlclBhdGg7XG5sZXQgd2FzbVBhdGg7XG5cbmlmIChfX0RFVl9fICYmIF9fTk9ERV9fKSB7XG4gIGNvbnN0IGJhc2UgPSBwYXRoLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKCdjc3MtdG8tanMtc291cmNlbWFwLXdvcmtlcicpKTtcbiAgd29ya2VyUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnd29ya2VyLmpzJyk7XG4gIHdhc21QYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICdtYXBwaW5ncy53YXNtJyk7XG59XG5cbmNvbnN0IFN0eWxldHJvbkNvbXBhdCA9IGluamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW4oU3R5bGV0cm9uKTtcblxuY29uc3QgcGx1Z2luID1cbiAgX19OT0RFX18gJiZcbiAgY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBwcmVmaXg6IEF0b21pY1ByZWZpeFRva2VuLm9wdGlvbmFsLFxuICAgIH0sXG4gICAgbWlkZGxld2FyZTogKHtwcmVmaXh9KSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoY3R4LnVybCA9PT0gd29ya2VyUm91dGUpIHtcbiAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od29ya2VyUGF0aCk7XG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LnVybCA9PT0gd2FzbVJvdXRlKSB7XG4gICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdhc21QYXRoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjdHguZWxlbWVudCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBwcmVmaXggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHtwcmVmaXh9O1xuICAgICAgICBjb25zdCBlbmdpbmUgPSBuZXcgU3R5bGV0cm9uQ29tcGF0KGNvbmZpZyk7XG5cbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPFN0eWxldHJvblByb3ZpZGVyIHZhbHVlPXtlbmdpbmV9PlxuICAgICAgICAgICAgPExlZ2FjeVByb3ZpZGVyIHZhbHVlPXtlbmdpbmV9PntjdHguZWxlbWVudH08L0xlZ2FjeVByb3ZpZGVyPlxuICAgICAgICAgIDwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIG5leHQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZXNGb3JIZWFkID0gZW5naW5lLmdldFN0eWxlc2hlZXRzSHRtbCgpO1xuICAgICAgICAgIGN0eC50ZW1wbGF0ZS5oZWFkLnB1c2goZGFuZ2Vyb3VzbHlTZXRIVE1MKHN0eWxlc0ZvckhlYWQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKHBsdWdpbjogYW55KTogRnVzaW9uUGx1Z2luPCosICo+KTtcbiJdfQ==