"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */
const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Client);
let debugEngine;
let engine;
const plugin = false && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (ctx.element) {
      if (!engine) {
        const config = {
          hydrate: document.getElementsByClassName('_styletron_hydrate_')
        };

        if (prefix !== void 0) {
          config.prefix = prefix;
        }

        engine = new StyletronCompat(config);
      }

      if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
        const worker = new Worker(workerRoute);
        worker.postMessage({
          id: 'init_wasm',
          url: wasmRoute
        });
        worker.postMessage({
          id: 'set_render_interval',
          interval: 180
        });

        if (module.hot) {
          module.hot.addStatusHandler(status => {
            if (status === 'dispose') {
              worker.postMessage({
                id: 'invalidate'
              });
            }
          });
        }

        debugEngine = new DebugEngine(worker);
      }

      ctx.element = _react.default.createElement(StyletronProvider, {
        value: engine,
        debug: debugEngine,
        debugAfterHydration: Boolean(debugEngine)
      }, _react.default.createElement(LegacyProvider, {
        value: engine
      }, ctx.element));
    }

    return next();
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsiU3R5bGV0cm9uQ29tcGF0IiwiU3R5bGV0cm9uIiwiZGVidWdFbmdpbmUiLCJlbmdpbmUiLCJwbHVnaW4iLCJjcmVhdGVQbHVnaW4iLCJkZXBzIiwicHJlZml4IiwiQXRvbWljUHJlZml4VG9rZW4iLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZWxlbWVudCIsImNvbmZpZyIsImh5ZHJhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJXb3JrZXIiLCJ3b3JrZXIiLCJ3b3JrZXJSb3V0ZSIsInBvc3RNZXNzYWdlIiwiaWQiLCJ1cmwiLCJ3YXNtUm91dGUiLCJpbnRlcnZhbCIsIm1vZHVsZSIsImhvdCIsImFkZFN0YXR1c0hhbmRsZXIiLCJzdGF0dXMiLCJEZWJ1Z0VuZ2luZSIsIkJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFXQTs7QUFLQTs7QUFJQTs7OztBQXBCQTs7Ozs7Ozs7QUFRQTs7QUFDQTtBQWFBLE1BQU1BLGVBQWUsR0FBRyxnRUFBNkJDLDZCQUE3QixDQUF4QjtBQUVBLElBQUlDLFdBQUo7QUFDQSxJQUFJQyxNQUFKO0FBRUEsTUFBTUMsTUFBTSxHQUNWLFNBQ0FDLFlBQVksQ0FBQztBQUNYQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQ0M7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDSCxJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDSSxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QyxRQUFJRCxHQUFHLENBQUNFLE9BQVIsRUFBaUI7QUFDZixVQUFJLENBQUNWLE1BQUwsRUFBYTtBQUNYLGNBQU1XLE1BR0wsR0FBRztBQUNGQyxVQUFBQSxPQUFPLEVBQUVDLFFBQVEsQ0FBQ0Msc0JBQVQsQ0FBZ0MscUJBQWhDO0FBRFAsU0FISjs7QUFNQSxZQUFJVixNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQk8sVUFBQUEsTUFBTSxDQUFDUCxNQUFQLEdBQWdCQSxNQUFoQjtBQUNEOztBQUNESixRQUFBQSxNQUFNLEdBQUcsSUFBSUgsZUFBSixDQUFvQmMsTUFBcEIsQ0FBVDtBQUNEOztBQUNELFVBQUkseUNBQVcsQ0FBQ1osV0FBWixJQUEyQixPQUFPZ0IsTUFBUCxLQUFrQixXQUFqRCxFQUE4RDtBQUM1RCxjQUFNQyxNQUFNLEdBQUcsSUFBSUQsTUFBSixDQUFXRSxXQUFYLENBQWY7QUFDQUQsUUFBQUEsTUFBTSxDQUFDRSxXQUFQLENBQW1CO0FBQ2pCQyxVQUFBQSxFQUFFLEVBQUUsV0FEYTtBQUVqQkMsVUFBQUEsR0FBRyxFQUFFQztBQUZZLFNBQW5CO0FBSUFMLFFBQUFBLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQjtBQUNqQkMsVUFBQUEsRUFBRSxFQUFFLHFCQURhO0FBRWpCRyxVQUFBQSxRQUFRLEVBQUU7QUFGTyxTQUFuQjs7QUFJQSxZQUFLQyxNQUFELENBQWNDLEdBQWxCLEVBQXVCO0FBQ3BCRCxVQUFBQSxNQUFELENBQWNDLEdBQWQsQ0FBa0JDLGdCQUFsQixDQUFtQ0MsTUFBTSxJQUFJO0FBQzNDLGdCQUFJQSxNQUFNLEtBQUssU0FBZixFQUEwQjtBQUN4QlYsY0FBQUEsTUFBTSxDQUFDRSxXQUFQLENBQW1CO0FBQUNDLGdCQUFBQSxFQUFFLEVBQUU7QUFBTCxlQUFuQjtBQUNEO0FBQ0YsV0FKRDtBQUtEOztBQUNEcEIsUUFBQUEsV0FBVyxHQUFHLElBQUk0QixXQUFKLENBQWdCWCxNQUFoQixDQUFkO0FBQ0Q7O0FBQ0RSLE1BQUFBLEdBQUcsQ0FBQ0UsT0FBSixHQUNFLDZCQUFDLGlCQUFEO0FBQ0UsUUFBQSxLQUFLLEVBQUVWLE1BRFQ7QUFFRSxRQUFBLEtBQUssRUFBRUQsV0FGVDtBQUdFLFFBQUEsbUJBQW1CLEVBQUU2QixPQUFPLENBQUM3QixXQUFEO0FBSDlCLFNBS0UsNkJBQUMsY0FBRDtBQUFnQixRQUFBLEtBQUssRUFBRUM7QUFBdkIsU0FBZ0NRLEdBQUcsQ0FBQ0UsT0FBcEMsQ0FMRixDQURGO0FBU0Q7O0FBRUQsV0FBT0QsSUFBSSxFQUFYO0FBQ0Q7QUFqRFUsQ0FBRCxDQUZkO2VBc0RpQlIsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuLyogZ2xvYmFsIG1vZHVsZSAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcbmltcG9ydCB0eXBlIHtGdXNpb25QbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHtQcm92aWRlciBhcyBTdHlsZXRyb25Qcm92aWRlciwgRGVidWdFbmdpbmV9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5pbXBvcnQge0NsaWVudCBhcyBTdHlsZXRyb259IGZyb20gJ3N0eWxldHJvbi1lbmdpbmUtYXRvbWljJztcbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IExlZ2FjeVByb3ZpZGVyIGZyb20gJy4vbGVnYWN5LXByb3ZpZGVyLmpzJztcbmltcG9ydCB7aW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbn0gZnJvbSAnLi9pbmplY3QtZGVjbGFyYXRpb24tY29tcGF0LW1peGluLmpzJztcblxuY29uc3QgU3R5bGV0cm9uQ29tcGF0ID0gaW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbihTdHlsZXRyb24pO1xuXG5sZXQgZGVidWdFbmdpbmU7XG5sZXQgZW5naW5lO1xuXG5jb25zdCBwbHVnaW4gPVxuICBfX0JST1dTRVJfXyAmJlxuICBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHByZWZpeDogQXRvbWljUHJlZml4VG9rZW4ub3B0aW9uYWwsXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoe3ByZWZpeH0pID0+IChjdHgsIG5leHQpID0+IHtcbiAgICAgIGlmIChjdHguZWxlbWVudCkge1xuICAgICAgICBpZiAoIWVuZ2luZSkge1xuICAgICAgICAgIGNvbnN0IGNvbmZpZzoge1xuICAgICAgICAgICAgaHlkcmF0ZTogSFRNTENvbGxlY3Rpb248SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgcHJlZml4Pzogc3RyaW5nLFxuICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICBoeWRyYXRlOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdfc3R5bGV0cm9uX2h5ZHJhdGVfJyksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAocHJlZml4ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5wcmVmaXggPSBwcmVmaXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVuZ2luZSA9IG5ldyBTdHlsZXRyb25Db21wYXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhZGVidWdFbmdpbmUgJiYgdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclJvdXRlKTtcbiAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6ICdpbml0X3dhc20nLFxuICAgICAgICAgICAgdXJsOiB3YXNtUm91dGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiAnc2V0X3JlbmRlcl9pbnRlcnZhbCcsXG4gICAgICAgICAgICBpbnRlcnZhbDogMTgwLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICgobW9kdWxlOiBhbnkpLmhvdCkge1xuICAgICAgICAgICAgKG1vZHVsZTogYW55KS5ob3QuYWRkU3RhdHVzSGFuZGxlcihzdGF0dXMgPT4ge1xuICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZGlzcG9zZScpIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe2lkOiAnaW52YWxpZGF0ZSd9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlYnVnRW5naW5lID0gbmV3IERlYnVnRW5naW5lKHdvcmtlcik7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPFN0eWxldHJvblByb3ZpZGVyXG4gICAgICAgICAgICB2YWx1ZT17ZW5naW5lfVxuICAgICAgICAgICAgZGVidWc9e2RlYnVnRW5naW5lfVxuICAgICAgICAgICAgZGVidWdBZnRlckh5ZHJhdGlvbj17Qm9vbGVhbihkZWJ1Z0VuZ2luZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExlZ2FjeVByb3ZpZGVyIHZhbHVlPXtlbmdpbmV9PntjdHguZWxlbWVudH08L0xlZ2FjeVByb3ZpZGVyPlxuICAgICAgICAgIDwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBkZWZhdWx0ICgocGx1Z2luOiBhbnkpOiBGdXNpb25QbHVnaW48KiwgKj4pO1xuIl19